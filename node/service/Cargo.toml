[package]
name = "vitreus-service"
rust-version = "1.60"
version.workspace = true
authors.workspace = true
edition.workspace = true

[dependencies]
clap = { workspace = true, default-features = true, features = ["derive", "deprecated"] }
futures = { workspace = true, default-features = true }
gum = { workspace = true, default-features = true }
kvdb = { workspace = true, default-features = true }
kvdb-rocksdb = { workspace = true, default-features = true, optional = true }
log = { workspace = true, default-features = true }
parity-db = { workspace = true, default-features = true, optional = true }
parity-scale-codec = {workspace = true, default-features = true}
thiserror = { workspace = true, default-features = true }

# Polkadot
polkadot-core-primitives = { workspace = true, default-features = true }
polkadot-node-core-parachains-inherent = { workspace = true, default-features = true }
polkadot-node-network-protocol = { workspace = true, default-features = true }
polkadot-node-subsystem = { workspace = true, default-features = true }
polkadot-node-subsystem-types = { workspace = true, default-features = true }
polkadot-node-subsystem-util = { workspace = true, default-features = true }
polkadot-overseer = { workspace = true, default-features = true }
polkadot-primitives = { workspace = true, default-features = true }
polkadot-rpc = { workspace = true, default-features = true }
polkadot-service = { workspace = true, default-features = true }

# Polkadot Subsystems
polkadot-availability-recovery = { workspace = true, default-features = true, optional = true }
polkadot-network-bridge = { workspace = true, default-features = true, optional = true }
polkadot-node-core-approval-voting = { workspace = true, default-features = true, optional = true }
polkadot-node-core-av-store = { workspace = true, default-features = true, optional = true }
polkadot-node-core-candidate-validation = { workspace = true, default-features = true, optional = true }
polkadot-node-core-chain-selection = { workspace = true, default-features = true, optional = true }
polkadot-node-core-dispute-coordinator = { workspace = true, default-features = true, optional = true }

# Substrate Client
mmr-gadget = { workspace = true, default-features = true }
sc-authority-discovery = { workspace = true, default-features = true }
sc-basic-authorship = { workspace = true, default-features = true }
sc-client-api = { workspace = true, default-features = true }
sc-consensus = { workspace = true, default-features = true }
sc-consensus-babe = { workspace = true, default-features = true }
sc-consensus-beefy = { workspace = true, default-features = true }
sc-consensus-grandpa = { workspace = true, default-features = true }
sc-consensus-slots = { workspace = true, default-features = true }
sc-executor = { workspace = true, default-features = true }
sc-keystore = { workspace = true, default-features = true }
sc-network = { workspace = true, default-features = true }
sc-network-sync = { workspace = true, default-features = true }
sc-offchain = { workspace = true, default-features = true }
sc-service = { workspace = true, default-features = false }
sc-sysinfo = { workspace = true, default-features = true }
sc-telemetry = { workspace = true, default-features = true }
sc-transaction-pool = { workspace = true, default-features = true }
sc-transaction-pool-api = { workspace = true, default-features = true }

# Substrate Primitives
sp-api = { workspace = true, default-features = true }
sp-authority-discovery = { workspace = true, default-features = true }
sp-blockchain = { workspace = true, default-features = true }
sp-consensus =  { workspace = true, default-features = true }
sp-consensus-babe = { workspace = true, default-features = true }
sp-consensus-beefy = { workspace = true, default-features = true }
sp-core = { workspace = true, default-features = true }
sp-inherents = { workspace = true, default-features = true }
sp-io = { workspace = true, default-features = true }
sp-mmr-primitives = { workspace = true, default-features = true }
sp-runtime = { workspace = true, default-features = true }
sp-timestamp = { workspace = true, default-features = true }
sp-transaction-pool = { workspace = true, default-features = true }

# Substrate Pallets
frame-system = { workspace = true, default-features = true }
pallet-energy-fee = { workspace = true, default-features = true }
pallet-transaction-payment = { workspace = true, default-features = true }
pallet-transaction-payment-rpc-runtime-api = { workspace = true, default-features = true }

# Substrate Other
frame-benchmarking-cli = { workspace = true, default-features = true }
frame-benchmarking = { workspace = true, default-features = true }

# Frontier
fc-consensus = { workspace = true, default-features = true }
fc-db = { workspace = true, default-features = true }
fc-mapping-sync = { workspace = true, default-features = true }
fc-rpc = { workspace = true, default-features = true }
fc-rpc-core = { workspace = true, default-features = true }
fc-storage = { workspace = true, default-features = true }
fp-account = { workspace = true, default-features = true }
fp-dynamic-fee = { workspace = true, default-features = true }
fp-rpc = { workspace = true, default-features = true }

vitreus-power-plant-runtime = { workspace = true, default-features = true }
vitreus-rpc = { workspace = true, default-features = true }

[dev-dependencies]
tempfile = { workspace = true, default-features = true }

polkadot-node-subsystem-test-helpers = { workspace = true, default-features = true }
polkadot-primitives-test-helpers = { workspace = true, default-features = true }

[features]
default = ["db", "full-node", "sql", "txpool", "with-rocksdb-weights"]

with-rocksdb-weights = ["vitreus-power-plant-runtime/with-rocksdb-weights"]
with-paritydb-weights = ["vitreus-power-plant-runtime/with-paritydb-weights"]
sql = ["fc-db/sql", "fc-mapping-sync/sql"]
txpool = ["fc-rpc/txpool"]
rpc-binary-search-estimate = ["fc-rpc/rpc-binary-search-estimate"]

db = [
    "sc-service/rocksdb",
    "fc-db/rocksdb",
    "fc-mapping-sync/rocksdb",
    "fc-rpc/rocksdb",
]

full-node = [
    "polkadot-availability-recovery",
    "polkadot-network-bridge",
    "polkadot-node-core-approval-voting",
    "polkadot-node-core-av-store",
    "polkadot-node-core-candidate-validation",
    "polkadot-node-core-chain-selection",
    "polkadot-node-core-dispute-coordinator",
    "kvdb-rocksdb",
    "parity-db",
]

# Configure the native runtimes to use.
mainnet-native = ["vitreus-power-plant-runtime/mainnet-runtime"]
testnet-native = ["vitreus-power-plant-runtime/testnet-runtime"]

runtime-benchmarks = ["sc-service/runtime-benchmarks"]
try-runtime = ["vitreus-power-plant-runtime/try-runtime"]
fast-runtime = ["vitreus-power-plant-runtime/fast-runtime"]

malus = ["full-node"]