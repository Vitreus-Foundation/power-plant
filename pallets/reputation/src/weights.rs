//! Autogenerated weights for pallet_template
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-04-06, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `Alexs-MacBook-Pro-2.local`, CPU: `<UNKNOWN>`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 1024
//! Autogenerated Weights for Reputation Pallet
//!
//! This file provides auto-generated weights for the Reputation pallet using the Substrate Benchmark CLI.
//! The weights are used to calculate the computational costs of different pallet functions, ensuring the on-chain execution remains balanced and predictable.
//!
//! # Features
//! - Generated using Substrate Benchmark CLI version 4.0.0-dev.
//! - Weights include details about worst-case map sizes and benchmark settings.
//! - Includes information about the execution environment, such as the chain type and Wasm execution settings.
//!
//! # Structure
//! - Contains autogenerated functions that return weight values for specific pallet operations.
//! - These weights are critical for accurately determining the resource consumption of pallet extrinsics.
//!
//! # Usage
//! - Use the weights defined in this file to configure the operational costs of the Reputation pallet in your runtime.
//! - The weights are integrated into the pallet to ensure accurate fee calculation and resource management.
//!
//! # Dependencies
//! - Relies on the Substrate benchmarking framework to generate weights based on runtime performance.
//! - Requires a consistent benchmarking setup to ensure weights reflect realistic conditions and edge cases.
//!
//! # Important Notes
//! - This file is autogenerated, and manual changes may be overwritten during subsequent benchmarks.
//! - Always regenerate weights after making changes to pallet logic to maintain consistency and correctness in execution costs.
//! - The benchmarking was performed on a development chain (`dev`) and may need to be adjusted for production environments.

// Executed Command:
// ../../target/release/node-template
// benchmark
// pallet
// --chain
// dev
// --pallet
// pallet_template
// --extrinsic
// *
// --steps=50
// --repeat=20
// --execution=wasm
// --wasm-execution=compiled
// --output
// pallets/template/src/weights.rs
// --template
// ../../.maintain/frame-weight-template.hbs

#![allow(missing_docs)]
#![allow(unused_imports)]
#![allow(unused_parens)]
#![cfg_attr(rustfmt, rustfmt_skip)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight, RuntimeDbWeight}};
use core::marker::PhantomData;

/// Weight functions needed for pallet_template.
pub trait WeightInfo {
    fn force_set_points() -> Weight;
    fn increase_points() -> Weight;
    fn slash() -> Weight;
    fn update_points() -> Weight;
    fn force_reset_points() -> Weight;
}

impl WeightInfo for () {
    
    fn force_set_points() -> Weight {
        RuntimeDbWeight::default().writes(1)
    }

    fn increase_points() -> Weight {
        RuntimeDbWeight::default().writes(1)
    }

    fn slash() -> Weight {
        RuntimeDbWeight::default().writes(1)
    }

    fn update_points() -> Weight {
        RuntimeDbWeight::default().reads_writes(1, 1)
    }

    fn force_reset_points() -> Weight {
        RuntimeDbWeight::default().reads_writes(500, 500)
    }
}
